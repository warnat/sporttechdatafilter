<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAQAAEABADoAgAAJgAAACAgAAABAAgAqAgAAA4DAAAoAAAAIAAAAEAAAAABAAQAAAAAAAAC
        AAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzMzMAAAAAAAAAAAAAAzM
        zMzMzMzAAAAAAAAAACIgzMzMzMzMDMAAAAAAAAIiIgzMzMzMwCDMAAAAAAAqoqIgDMzMzMBgzMAAAAAC
        qioqIiDMzMzMDMwAAAAAKqqqoqIgzMzMzMwAIgAAACqqqqoiIMzMzMzAIiAgAAqqqqqqoiIMzMwMAiIi
        IAAKp6qqqqIiDs7AICIiIgIACnp6qqoiIuzswiIiIiIiAKenp6qiIi7OzsJiYiIiIgCnenqqIi7u7uzi
        JiYiIiAgr3enqi7u7u7uwnJiYiIiAHp3enqi7u7u7idmJiIiIiB/p3eiLu7u7uJ2Z2JiIiIgf/qnru7u
        7u7uJyJ2JiYiIH//+u7u7u7u7uLMInJiIiB//+/u7u7u7uLu7MwnZiIgB//+/iLu7u4iLiDMJ2YiAAf/
        /+IiLu7u4uKiDMJyIgAH//7yoi7u7u7uKiDMIiIAAH/yKqIi7u7u7uKizMwgAAB/KqqiIi7u7u7uLMzM
        wAAACn96qiIi7u7u7uzszAAAAACn96qqIi7iLO7uzMAAAAAACn96qqIiIiIs7swAAAAAAACn96qqqqIi
        IszMAAAAAAAACqf3qqqqoiIswAAAAAAAAAAKqn96qqoiIAAAAAAAAAAAAACqqqqqAAAAAAAA//AP//+A
        Af/+AAB//AAAP/gAAB/wAAAP4AAAB8AAAAPAAAADgAAAAYAAAAGAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAABgAAAAYAAAAHAAAADwAAAA+AAAAfwAAAP+AAAH/wAAD/+AAB//4AB///w
        D/8oAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAA
        AACAAIAAgIAAAMDAwADA3MAA8MqmANTw/wCx4v8AjtT/AGvG/wBIuP8AJar/AACq/wAAktwAAHq5AABi
        lgAASnMAADJQANTj/wCxx/8Ajqv/AGuP/wBIc/8AJVf/AABV/wAASdwAAD25AAAxlgAAJXMAABlQANTU
        /wCxsf8Ajo7/AGtr/wBISP8AJSX/AAAA/gAAANwAAAC5AAAAlgAAAHMAAABQAOPU/wDHsf8Aq47/AI9r
        /wBzSP8AVyX/AFUA/wBJANwAPQC5ADEAlgAlAHMAGQBQAPDU/wDisf8A1I7/AMZr/wC4SP8AqiX/AKoA
        /wCSANwAegC5AGIAlgBKAHMAMgBQAP/U/wD/sf8A/47/AP9r/wD/SP8A/yX/AP4A/gDcANwAuQC5AJYA
        lgBzAHMAUABQAP/U8AD/seIA/47UAP9rxgD/SLgA/yWqAP8AqgDcAJIAuQB6AJYAYgBzAEoAUAAyAP/U
        4wD/sccA/46rAP9rjwD/SHMA/yVXAP8AVQDcAEkAuQA9AJYAMQBzACUAUAAZAP/U1AD/sbEA/46OAP9r
        awD/SEgA/yUlAP4AAADcAAAAuQAAAJYAAABzAAAAUAAAAP/j1AD/x7EA/6uOAP+PawD/c0gA/1clAP9V
        AADcSQAAuT0AAJYxAABzJQAAUBkAAP/w1AD/4rEA/9SOAP/GawD/uEgA/6olAP+qAADckgAAuXoAAJZi
        AABzSgAAUDIAAP//1AD//7EA//+OAP//awD//0gA//8lAP7+AADc3AAAubkAAJaWAABzcwAAUFAAAPD/
        1ADi/7EA1P+OAMb/awC4/0gAqv8lAKr/AACS3AAAerkAAGKWAABKcwAAMlAAAOP/1ADH/7EAq/+OAI//
        awBz/0gAV/8lAFX/AABJ3AAAPbkAADGWAAAlcwAAGVAAANT/1ACx/7EAjv+OAGv/awBI/0gAJf8lAAD+
        AAAA3AAAALkAAACWAAAAcwAAAFAAANT/4wCx/8cAjv+rAGv/jwBI/3MAJf9XAAD/VQAA3EkAALk9AACW
        MQAAcyUAAFAZANT/8ACx/+IAjv/UAGv/xgBI/7gAJf+qAAD/qgAA3JIAALl6AACWYgAAc0oAAFAyANT/
        /wCx//8Ajv//AGv//wBI//8AJf//AAD+/gAA3NwAALm5AACWlgAAc3MAAFBQAPLy8gDm5uYA2traAM7O
        zgDCwsIAtra2AKqqqgCenp4AkpKSAIaGhgB6enoAbm5uAGJiYgBWVlYASkpKAD4+PgAyMjIAJiYmABoa
        GgAODg4A8Pv/AKSgoACAgIAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn5+fn5+fn4AAAAAAAAAAAAAAAAAAAAAAAAAAAB+
        fn5+fn5+b35vfn5+fgAAAAAAAAAAAAAAAAAAAL3Hx71vb29vb29vb35vfn69fn4AAAAAAAAAAAAAAAC9
        x8fHx71vb297b3tvb29vvdW9fn4AAAAAAAAAAAAAva6ux67Hx729b3t7b3tvb2+9q71+fn4AAAAAAAAA
        AMeurseux67Hx8e9e3t7b3tvb2+9b29vvb0AAAAAAADHq6uurq6ux67Hx717e3t7e3tve29vvb3V1b0A
        AAAAAMerrquurq6ux8fHvXt7e3t7e3tvb728vLy91QAAAACuq6urrquuq66ux8fHvXt7e3t7vW+9x7y8
        vLzVvQAAAK6rsqurrquurq7Hx8e9iHuIe73Hvce8x7y8vL3VAAAArrKrsqurrquux8fH1Yh7iHt71cfH
        x8e8x7y8vNUAAK6yq7KrsqurrsfHvb2Ie4h7iHvVq6+rx8e8x7y81b0ArrKyq7Krq6vHvb2IiIiIiIh7
        iNWvq6+rvMe8x7y91QCu4rKyq7Krq72GiIaIiIiIiIh71bKvq6+rvMe8vLy9AAmusrKyq7Krq72GiIaI
        hoiIiNWyq6uvq6/HvMe8vNUACY6usrKyq729hoaGiIaIhojVsqursquvq6+vvMe81QAJjo6urrKuhpOG
        hoaGiIaIhojVsry8squvq6+rx7zVAAnijo6OrpOThpOGhoaGiIaIhojVe3u8vLKvq6/HvNUACY7ijpOO
        k5OThoaGhoaGiIbViIiIe3t7vLKrq8fH1QAACY7ijpOOk9XVhoaGhoiTvNXVhtW9e3u8squrx8cAAAAJ
        4o7ijpPVx8fVhoaGhoaTvIa8rtW9e3u8ssfHvAAAAAmO4o6TjtWux9WIhoaGhoiGiIa8rtW9e3u8vMe8
        AAAAAAmO4tXVrq7Hx9WIhoaGhoiGiIa8rrx7e3t7vAAAAAAACeLVq6urrsfHx9WIhoaGhoiGiIa8e3t7
        e3t7AAAAAAAArrLisquursfHx9WIhoaIhoiIiIZ7iHt7ewAAAAAAAAAArrLisquurq7Hx9WIhtXVe4iI
        iIh7e3sAAAAAAAAAAAAArrLisqurrq7Hx9XVx8fV1XuIiHt7AAAAAAAAAAAAAAAArrLisqurq66urq7H
        x8fH1Xt7e3sAAAAAAAAAAAAAAAAArq6y4rKrq6urrq6ux8fH1Xt7AAAAAAAAAAAAAAAAAAAAAK6urrLi
        squrq66ux8fVAAAAAAAAAAAAAAAAAAAAAAAAAAAArq6urq6urq4AAAAAAAAAAAAAAAD/8A///4AB//4A
        AH/8AAA/+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAAGAAAABgAAAAcAAAAPAAAAD4AAAB/AAAA/4AAAf/AAAP/4AAH//gAH///AP/w==
</value>
  </data>
</root>